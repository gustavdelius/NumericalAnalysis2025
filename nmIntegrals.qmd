# Integrals {#sec-integrals}

Now we begin our work on the second principal computation of Calculus: evaluating a definite integral. Remember that a single-variable definite integral can be interpreted as the signed area between the curve and the $x$ axis. In this section we will study three different techniques for approximating the value of a definite integral.

------------------------------------------------------------------------

::: {#exr-3.31}
 Consider the shaded area of the region under the function plotted in @fig-3.4 between $x=0$ and $x=2$.

1.  What rectangle with area 6 gives an upper bound for the area under the curve? Can you give a better upper bound?

2.  Why must the area under the curve be greater than 3?

3.  Is the area greater than 4? Why/Why not?

4.  Work with your group to give an estimate of the area and provide an estimate for the amount of error that you are making.

![A sample integration](figures/Calculus/InitialIntegral.png){#fig-3.4 alt="A sample integration"}

:::

------------------------------------------------------------------------

## Riemann Sums

In this subsection we will build our first method for approximating definite integrals. Recall from Calculus that the definition of the Riemann integral is 
\begin{equation}
\begin{aligned} \int_a^b f(x) dx = \lim_{\Delta x \to 0} \sum_{j=1}^N f(x_j) \Delta x, \label{eqn:Riemann_integral}\end{aligned}
\end{equation}
 where $N$ is the number of sub intervals on the interval $[a,b]$ and $\Delta x$ is the width of the interval. As with differentiation, we can remove the limit and have a decent approximation of the integral so long as $N$ is large (or equivalently, as long as $\Delta x$ is small). 
\begin{equation}
\int_a^b f(x) dx \approx \sum_{j=1}^N f(x_j) \Delta x.
\end{equation}
 You are likely familiar with this approximation of the integral from Calculus. The value of $x_j$ can be chosen anywhere within the sub interval and three common choices are to use the left-aligned, the midpoint-aligned, and the right-aligned.

We see a depiction of this in @fig-3.5.

![Left-aligned Riemann sum, midpoint-aligned Riemann sum, and right-aligned Riemann sum](figures/Calculus/ThreeRiemannSums.png){#fig-3.5 alt="Left-aligned Riemann sum, midpoint-aligned Riemann sum, and right-aligned Riemann sum"}

Clearly, the more rectangles we choose the closer the sum of the areas of the rectangles will get to the integral.

------------------------------------------------------------------------

::: {#exr-3.32}
 Write code to approximate an integral with Riemann sums. You should ALWAYS start by writing pseudo-code as comments in your function. Your Python function should accept a Python Function, a lower bound, an upper bound, the number of subintervals, and an optional input that allows the user to designate whether they want 'left', 'right', or 'midpoint' rectangles. Test your code on several functions for which you know the integral. You should write your code without any loops.

:::

------------------------------------------------------------------------

::: {#exr-3.33}
 Consider the function $f(x) = \sin(x)$. We know the antiderivative for this function, $F(x) = -\cos(x) + C$, but in this question we are going to get a sense of the order of the error when doing Riemann Sum integration.

1.  Find the exact value of 
\begin{equation}
\int_0^{1} f(x) dx.
\end{equation}


2.  Now build a Riemann Sum approximation (using your code) with various values of $\Delta x$. For all of your approximation use left-justified rectangles. Fill in the table with your results. If you want to save yourself tedious work, you will let Python create the table. You may need to recall @sec-pandas on Pandas.

| $\Delta x$      | **Approx. Integral** | **Absolute Error** |
|-------------------|----------------------|--------------------|
| $2^{-1} = 0.5$  |                      |                    |
| $2^{-2} = 0.25$ |                      |                    |
| $2^{-3}$        |                      |                    |
| $2^{-4}$        |                      |                    |
| $2^{-5}$        |                      |                    |
| $2^{-6}$        |                      |                    |
| $2^{-7}$        |                      |                    |
| $2^{-8}$        |                      |                    |

3.  There was nothing really special about powers of 2 in part (2) of this exercise. Examine other sequences of $\Delta x$ with a goal toward answering the question:

> If we find an approximation of the integral with a fixed $\Delta x$ and find an absolute   error, then what would happen to the absolute   error if we divide $\Delta x$ by some positive constant $M$?

:::

------------------------------------------------------------------------

::: {#exr-3.34}
 Repeat the previous exercise using right-justified rectangles.

:::

------------------------------------------------------------------------

::: {#exr-3.36}
 Create a plot with the width of the subintervals on the horizontal axis and the absolute error between your Riemann sum calculations (left, right, and midpoint) and the exact integral for a known definite integral of your choice. Your plot should be on a log-log scale. Based on your plot, what is the approximate order of the error in the Riemann sum approximation?

:::

------------------------------------------------------------------------

## Trapezoidal Rule

Now let us turn our attention to some slightly better algorithms for calculating the value of a definite integral: The Trapezoidal Rule and Simpson's Rule. There are many others, but in practice these two are relatively easy to implement and have reasonably good error approximations. To motivate the idea of the trapezoidal rule consider @fig-3.6. It is plain to see that trapezoids will make better approximations than rectangles at least in this particular case. Another way to think about using trapezoids, however, is to see the top side of the trapezoid as a secant line connecting two points on the curve. As $\Delta x$ gets arbitrarily small, the secant lines become better and better approximations for tangent lines and are hence arbitrarily good approximations for the curve. For these reasons it seems like we should investigate how to systematically approximate definite integrals via trapezoids.

![Motivation for using trapezoids to approximate a definite integral.](figures/Calculus/Trapezoidal1.png){#fig-3.6 alt="Motivation for using trapezoids to approximate a definite integral."}

------------------------------------------------------------------------

::: {#exr-3.37}
 Consider a single trapezoid approximating the area under a curve. From geometry we recall that the area of a trapezoid is 
\begin{equation}
A = \frac{1}{2}\left( b_1 + b_2 \right) h,
\end{equation}
 where $b_1, b_2$ and $h$ are marked in @fig-3.7. The function shown in the picture is $f(x) = \frac{1}{5} x^2 (5-x)$. Find the area of the shaded region as an approximation to 
\begin{equation}
\int_1^4 \left( \frac{1}{5} x^2 (5-x) \right) dx.
\end{equation}


Now use the same idea with $h = \Delta x = 1$ from @fig-3.6 to approximate the area under the function $f(x) = \frac{1}{5}x^2(5-x)$ between $x=1$ and $x=4$ using three trapezoids.

![A single trapezoid to approximate area under a curve.](figures/Calculus/Trapezoidal2.png){#fig-3.7 alt="A single trapezoid to approximate area under a curve."}
:::

------------------------------------------------------------------------

::: {#exr-3.38}
 Again consider the function $f(x) = \frac{1}{5}x^2(5-x)$ on the interval $[1,4]$. We want to evaluate the integral 
\begin{equation}
\int_1^4 f(x) dx
\end{equation}
 using trapezoids to approximate the area.

1.  Work out the exact value of the definite integral by hand.

2.  Summarize your answers to the previous exercises in the following table then extend the data that you have for smaller and smaller values of $\Delta x$.

| $\Delta x$ | **Approx. Integral** | **Exact Integral** | **Abs.   Error** |
|--------------|----------------------|--------------------|------------------|
| $3$        |                      |                    |                  |
| $1$        |                      |                    |                  |
| $1/3$      |                      |                    |                  |
| $1/9$      |                      |                    |                  |
| $\vdots$   | $\vdots$           | $\vdots$         | $\vdots$       |

3.  From the table that you built in part (2), what do you conjecture is the order of the approximation error for the trapezoidal method?

:::

------------------------------------------------------------------------

::: {#def-3.3}

#### The Trapezoidal Rule
We want to approximate $\displaystyle \int_a^b f(x) dx$. One of the simplest ways is to approximate the area under the function with a trapezoid. Recall from basic geometry that area of a trapezoid is $A = \frac{1}{2} (b_1 + b_2) h$. In terms of the integration problem we can do the following:

1.  First partition $[a,b]$ into the set $\{x_0=a, x_1, x_2, \ldots, x_{n-1},x_n=b\}$.

2.  On each part of the partition approximate the area with a trapezoid: 
\begin{equation}
A_j = \frac{1}{2} \left[ f(x_j) + f(x_{j-1}) \right]\left(x_j - x_{j-1} \right).
\end{equation}


3.  Approximate the integral as 
\begin{equation}
\int_a^b f(x) dx = \sum_{j=1}^n A_j.
\end{equation}


:::

------------------------------------------------------------------------

::: {#exr-3.39}
 Write code to give the trapezoidal rule approximation for the definite integral $\int_a^b f(x) dx$. Test your code on functions where you know the definite area. Then test your code on functions where you have approximated the area by examining a plot (i.e.Â you have a visual estimate of the area).

:::

------------------------------------------------------------------------

::: {#exr-3.40}
 Use the code that you wrote in the previous exercise to test your conjecture about the order of the approximation error for the trapezoidal rule. Integrate the function $f(x) = \sin(x)$ from $x=0$ to $x=1$ with more and more trapezoids. In each case compare to the exact answer and find the absolute  error. The goal is to answer the question:

> If we calculate the definite integral with a fixed $\Delta x$ and get an absolute   error, $P$, then what absolute   error will we get if we use a width of $\Delta x / M$ for some positive number $M$?

:::

------------------------------------------------------------------------

## Simpsons Rule

The trapezoidal rule does a decent job approximating integrals, but ultimately you are using linear functions to approximate $f(x)$ and the accuracy may suffer if the step size is too large or the function too non-linear. You likely notice that the trapezoidal rule will give an exact answer if you were to integrate a linear or constant function. A potentially better approach would be to get an integral that evaluates quadratic functions exactly. In order to do this we need to evaluate the function at three points (not two like the trapezoidal rule). Let us integrate a function $f(x)$ on the interval $[a,b]$ by using the three points $(a,f(a))$, $(m,f(m))$, and $(b,f(b))$ where $m=\frac{a+b}{2}$ is the midpoint of the two boundary points.

We want to find constants $A_1$, $A_2$, and $A_3$ such that the integral $\int_a^b f(x) dx$ can be written as a linear combination of $f(a)$, $f(m)$, and $f(b)$. Specifically, we want to find constants $A_1$, $A_2$, and $A_3$ in terms of $a$, $b$, $f(a)$, $f(b)$, and $f(m)$ such that 
\begin{equation}
\int_a^b f(x) dx = A_1 f(a) + A_2 f(m) + A_3 f(b)
\end{equation}
 is exact for all constant, linear, and quadratic functions. This would guarantee that we have an exact integration method for all polynomials of order 2 or less but should serve as a decent approximation if the function is not quadratic.

------------------------------------------------------------------------

::: {#exr-3.41}
 Draw a picture showing what the previous two paragraphs discussed.

:::

------------------------------------------------------------------------

::: {#exr-3.42}
 Follow these steps to find $A_1$, $A_2$, and $A_3$.

1.  Verify that 
\begin{equation}
\int_a^b 1 dx = b-a = A_1 + A_2 + A_3.
\end{equation}


2.  Verify that 
\begin{equation}
\int_a^b x dx = \frac{b^2 - a^2}{2} = A_1 a + A_2 \left( \frac{a+b}{2} \right) + A_3 b.
\end{equation}


3.  Verify that 
\begin{equation}
\int_a^b x^2 dx = \frac{b^3 - a^3}{3} = A_1 a^2 + A_2 \left( \frac{a+b}{2} \right)^2 + A_3 b^2.
\end{equation}


4.  Verify that the above linear system of equations has the solution 
\begin{equation}
A_1 = \frac{b-a}{6}, \quad A_2 = \frac{4(b-a)}{6}, \quad \text{and} \quad A_3 = \frac{b-a}{6}.
\end{equation}


:::

------------------------------------------------------------------------

::: {#exr-3.43}
 At this point we can see that an integral can be approximated as 
\begin{equation}
\int_a^b f(x) dx \approx \left( \frac{b-a}{6} \right) \left( f(a) + 4f\left( \frac{a+b}{2} \right) + f(b) \right)
\end{equation}
 and the technique will give an exact answer for any polynomial of order 2 or below.

Verify the previous sentence by integrating $f(x) = 1$, $f(x) = x$ and $f(x) = x^2$ by hand on the interval $[0,1]$ and using the approximation formula 
\begin{equation}
\int_a^b f(x) dx \approx \left( \frac{b-a}{6} \right) \left( f(a) + 4f\left( \frac{a+b}{2} \right) + f(b) \right).
\end{equation}


1.  Use the method described above to approximate the area under the curve $f(x) = (1/5) x^2 (5-x)$ on the interval $[1,4]$. To be clear, you will be using the points $a=1, m=2.5$, and $b=4$ in the above derivation.

2.  Next find the exact area under the curve $f(x) = (1/5) x^2 (5-x)$ on the interval $[1,4]$.

3.  What do you notice about the two areas? What does this sample exercise tell you about the formula that we derived above?

:::

------------------------------------------------------------------------

To make the punchline of the previous exercises a bit more clear, using the formula 
\begin{equation}
\int_a^b f(x) dx \approx \left( \frac{b-a}{6} \right) \left( f(a) + 4 f(m) + f(b) \right)
\end{equation}
 is the same as fitting a parabola to the three points $(a,f(a))$, $(m,f(m))$, and $(b,f(b))$ and finding the area under the parabola exactly. That is exactly the step up from the trapezoidal rule and Riemann sums that we were after:

-   Riemann sums approximate the function with constant functions,

-   the trapezoidal rule uses linear functions, and

-   now we have a method for approximating with parabolas.

To improve upon this idea we now examine the problem of partitioning the interval $[a,b]$ into small pieces and running this process on each piece. This is called Simpson's Rule for integration.

------------------------------------------------------------------------

::: {#def-3.4}
#### Simpson's Rule
Now we put the process explained above into a form that can be coded to approximate integrals. We call this method Simpson's Rule after [Thomas Simpson (1710-1761)](https://en.wikipedia.org/wiki/Thomas_Simpson) who, by the way, was a basket weaver in his day job so he could pay the bills and keep doing math.

1.  First partition $[a,b]$ into the set $\{x_0=a, x_1, x_2, \ldots, x_{n-1}, x_n=b\}$.

2.  On each part of the partition approximate the area with a parabola: 
\begin{equation}
A_j = \frac{1}{6} \left[ f(x_j) + 4 f\left( \frac{x_j+x_{j-1}}{2} \right) + f(x_{j-1}) \right]\left( x_j - x_{j-1} \right).
\end{equation}


3.  Approximate the integral as 
\begin{equation}
\int_a^b f(x) dx = \sum_{j=1}^n A_j.
\end{equation}


:::

------------------------------------------------------------------------

::: {#exr-3.45}
 Write a Python function that implements Simpson's Rule. You should ALWAYS start by writing pseudo-code as comments in your file. You should not need a loop in your function.

:::

------------------------------------------------------------------------

::: {#exr-3.46}
 Test your function on known integrals and approximate the order of the error based on the mesh size.

:::

------------------------------------------------------------------------

::: {#exr-3.44}
 We have spent a lot of time over the past many pages building approximations of the order of the error for numerical integration and differentiation schemes. It is now up to you.
Build a numerical experiment that allows you to conjecture the order of the approximation error for Simpson's rule. Remember that the goal is to answer the question:

> If I approximate the integral with a fixed $\Delta x$ and find an absolute   error of $P$, then what will the absolute   error be using a width of $\Delta x / M$?

:::

------------------------------------------------------------------------

Thus far we have three numerical approximations for definite integrals: Riemann sums (with rectangles), the trapezoidal rule, and Simpsons's rule. There are MANY other approximations for integrals and we leave the further research to the curious reader.

------------------------------------------------------------------------

::: {#thm-3.3}
### Numerical Integration Schemes
Let $f(x)$ be a continuous function on the interval $[a,b]$. The integral $\int_a^b f(x) dx$ can be approximated with any of the following. 
\begin{equation}
\begin{aligned} &\text{Riemann Sum: } \int_a^b f(x) dx \approx \sum_{j=1}^N f(x_j) \Delta x \\ & \qquad \text{Error for Left and Right Riemann Sums: } \mathcal{O}(\Delta x) \\ & \qquad \text{Error for Midpoint Riemann Sums: } \mathcal{O}(\Delta x^2) \\ &\text{Trapezoidal Rule: } \int_a^b f(x) dx \approx \frac{1}{2} \sum_{j=1}^N \left( f(x_j) + f(x_{j-1}) \right) \Delta x \\ & \qquad \text{Error for Trapezoidal Rule: } \mathcal{O}(\Delta x^2) \\ &\text{Simpson's Rule: } \int_a^b f(x) dx \approx \frac{1}{6} \sum_{j=1}^N \left( f(x_j) + 4 f\left( \frac{x_j + x_{j-1}}{2} \right) + f(x_{j-1}) \right) \Delta x \\ & \qquad \text{Error for Simpson's Rule: } \mathcal{O}(\Delta x^4) \\ \end{aligned}
\end{equation}
 where $\Delta x = x_j - x_{j-1}$ and $N$ is the number of subintervals.

:::

------------------------------------------------------------------------

::: {#exr-3.47}
 @thm-3.3 simply states the error rates for our three primary integration schemes. For this exercise you need to empirically verify these error rates. Use the integration problem and exact answer 
\begin{equation}
\int_0^{\pi/4} e^{3x} \sin(2x) dx = \frac{3}{13} e^{3\pi/4} + \frac{2}{13}
\end{equation}
 and write code that produces a log-log error plot with $\Delta x$ on the horizontal axis and the absolute error on the vertical axis. Fully explain how the error rates show themselves in your plot.

:::

------------------------------------------------------------------------

## Integration with `numpy` and `scipy`

In `numpy` there is a nice tool called `np.trapz()` that implements the trapezoidal rule. In the following exercise you will find several examples of the `np.trapz()` command. Use these examples to determine how the command works to integrate functions.

------------------------------------------------------------------------

::: {#exr-3.73}
 First we will approximate the integral $\int_{-2}^2 x^2 dx$. The exact answer is 
\begin{equation}
 \int_{-2}^2 x^2 dx = \frac{x^3}{3} \Big|_{-2}^2 = \frac{16}{3} = 5.3333\dots.
\end{equation}


``` python         
import numpy as np
x = np.linspace(-2,2,100)
dx = x[1]-x[0]
y = x**2
print("Approximate integral is ",np.trapz(y)*dx)
```

Next we will approximate $\int_0^{2\pi} \sin(x) dx$. We know that the exact value is 0.

``` python         
import numpy as np
x = np.linspace(0,2*np.pi,100)
dx = x[1]-x[0]
y = np.sin(x)
print("Approximate integral is ",np.trapz(y)*dx)
```

Pick a function and an interval for which you know the exact definite integral. Demonstrate how to use `np.trapz()` on your definite integral.

:::

------------------------------------------------------------------------

::: {#exr-3.74}
 Notice in the last examples that we multiplied the result of the `np.trapz()` command by `dx`. Why did we do this? What is the `np.trapz()` command doing without the `dx`?

:::

------------------------------------------------------------------------

In the `scipy` library there is a more general tool called `scipy.integrate.quad()`. The term "quad" is short for "quadrature." In numerical analysis literature rules like Simpson's rule are called quadrature rules for integration. The function `scipy.integrate.quad()` accepts a Python function (or a lambda function) and the bounds of the definite integral. It outputs an approximation of the integral along with an approximation of the error in the integral calculation. See the Python code below.

``` python         
import numpy as np
import scipy.integrate
f = lambda x: x**2
I = scipy.integrate.quad(f,-2,2)
print(I)
```

------------------------------------------------------------------------

::: {#exr-3.75}
 What are the advantages and disadvantages to using the `scipy.integrate.quad()` command as compared to the `np.trapz()` command.

:::

------------------------------------------------------------------------

::: {#exr-3.76}
 If you have data for the hourly rate at which water is being drained from a dam and you want to find the total amount of water drained over the course of the time in the dataset, then which of the tools that we know would you use? Why?

:::

------------------------------------------------------------------------


## Algorithm Summaries
::: {#exr-3.90}
 Explain how to approximate the value of a definite integral with Riemann sums. When will the Riemann sum approximation be exact? The Riemann sum approximation is first order. Explain what "first order" means for calculating a definite integral.

:::

------------------------------------------------------------------------

::: {#exr-3.91}
 Explain how to approximate the value of a definite integral with the trapezoidal rule. When will the trapezoidal rule approximation be exact? The Trapezoidal rule approximation is second order. Explain what "second order" means for calculating a definite integral.

:::

------------------------------------------------------------------------

::: {#exr-3.92}
 Explain how to approximate the value of a definite integral with Simpson's rule. Give the full mathematical details for where Simpson's rule comes from. When will the Simpson's rule approximation be exact? The Simpson's rule approximation is fourth order. Explain what "fourth order" means for calculating a definite integral.

:::

------------------------------------------------------------------------

## Problems

::: {#exr-3.100}
 Write a function that implements the trapezoidal rule on a list of $(x,y)$ order pairs representing the integrand function. The list of ordered pairs should be read from a spreadsheet file. Create a test spreadsheet file and a test script showing that your function is finding the correct integral.

:::

------------------------------------------------------------------------

::: {#exr-3.101}
 Use numerical integration to answer the question in each of the following scenarios

1.  We measure the rate at which water is flowing out of a reservoir (in gallons per second) several times over the course of one hour. Estimate the total amount of water which left the reservoir during that hour.

| **time (min)**      | **0** | **7** | **19** | **25** | **38** | **47** | **55** |
|---------------------|-------|-------|--------|--------|--------|--------|--------|
| flow rate (gal/sec) | 316   | 309   | 296    | 298    | 305    | 314    | 322    |

You can download the data directly from the github repository for this course with the code below.

``` python         
import numpy as np
import pandas as pd
data = np.array(pd.read_csv('https://github.com/gustavdelius/NumericalAnalysis2025/raw/main/data/Calculus/waterflow.csv'))
```

2.  The department of transportation finds that the rate at which cars cross a bridge can be approximated by the function 
\begin{equation}
f(t) = \frac{22.8 }{3.5 + 7(t-1.25)^4} ,
\end{equation}
 where $t=0$ at 4pm, and is measured in hours, and $f(t)$ is measured in cars per minute. Estimate the total number of cars that cross the bridge between 4 and 6pm. Make sure that your estimate has an error less than 5% and provide sufficient mathematical evidence of your error estimate.

:::

------------------------------------------------------------------------

::: {#exr-3.102}
 Consider the integrals 
\begin{equation}
\int_{-2}^2 e^{-x^2/2} dx \quad \text{and} \quad \int_0^1 \cos(x^2) dx.
\end{equation}
 Neither of these integrals have closed-form solutions so a numerical method is necessary. Create a log-log plot that shows the errors for the integrals with different values of $h$ (log of $h$ on the $x$-axis and log of the absolute error on the $y$-axis). Write a complete interpretation of the log-log plot. To get the *exact* answer for these plots use Python's `scipy.integrate.quad` command. (What we are really doing here is comparing our algorithms to Python's `scipy.integrate.quad()` algorithm).

:::

------------------------------------------------------------------------

::: {#exr-3.104}
 Numerically integrate each of the functions over the interval $[-1,2]$ with an appropriate technique and verify mathematically that your numerical integral is correct to 10 decimal places. Then provide a plot of the function along with its numerical first derivative.

1.  $f(x) = \frac{x}{1+x^4}$

2.  $g(x) = (x-1)^3 (x-2)^2$

3.  $h(x) = \sin\left(x^2\right)$

:::

------------------------------------------------------------------------

## Projects

In this section we propose several ideas for projects related to numerical Calculus. These projects are meant to be open ended, to encourage creative mathematics, to push your coding skills, and to require you to write and communicate your mathematics.


### Higher Order Integration

Riemann sums can be used to approximate integrals and they do so by using piecewise constant functions to approximate the function. The trapezoidal rule uses piece wise linear functions to approximate the function and then the area of a trapezoid to approximate the area. We saw earlier that Simpson's rule uses piece wise parabolas to approximate the function. The process which we used to build Simpson's rule can be extended to any higher-order polynomial. Your job in this project is to build integration algorithms that use piece wise cubic functions, quartic functions, etc. For each you need to show all of the mathematics necessary to derive the algorithm, provide several test cases to show that the algorithm works, and produce a numerical experiment that shows the order of accuracy of the algorithm.

### Dam Integration

Go to the USGS water data repository:\
<https://maps.waterdata.usgs.gov/mapper/index.html>.\
Here you will find a map with information about water resources around the country.

-   Zoom in to a dam of your choice (make sure that it is a dam).

-   Click on the map tag then click "Access Data"

-   From the drop down menu at the top select either "Daily Data" or "Current / Historical Data." If these options do not appear then choose a different dam.

-   Change the dates so you have the past year's worth of information.

-   Select "Tab-separated" under "Output format" and press Go. Be sure that the data you got has a flow rate (ft$^3$/sec).

-   At this point you should have access to the entire data set. Copy it into a `csv` file and save it to your computer.

For the data that you just downloaded you have three tasks: (1) plot the data in a reasonable way giving appropriate units, (2) find the total amount of water that has been discharged from the dam during the past calendar year, and (3) report any margin of error in your calculation based on the numerical method that you used in part (2).



------------------------------------------------------------------------

### WHO Data Integration

 Go to [data.gov](https://www.data.gov/) or the [World Health Organization Data Repository](http://apps.who.int/gho/data/?theme=home) and find a data set where the variables naturally lead to a meaningful definite integral. Use appropriate code to evaluate the definite integral. If your data appears to be subject to significant noise then you might want to smooth the data first before doing the integral. Write a few sentences explaining what the integral means in the context of the data. Be very cautious of the units on the data sets and the units of your answer.

